Reflection
Week 2, day 4

Serhii Herasymov
SoftServe
sgeras@softserveinc.com



* What is "reflection"?

Reflection in computing is the ability of a program to  examine its own structure, particularly through types;  it's a form of metaprogramming. It's also a great
source of confusion.

.link http://blog.golang.org/laws-of-reflection http://blog.golang.org/laws-of-reflection

* Laws of reflection

- Reflection goes from interface value to reflection object
- Reflection goes from reflection object to interface value
- To modify a reflection object, the value must be settable

* Reflection goes from interface  value to reflection object

    var x float64 = 3.4
    v := reflect.ValueOf(x)

    fmt.Println("type:", v.Type())
    fmt.Println("kind is float64:", v.Kind() == reflect.Float64)
    fmt.Println("value:", v.Float())

prints

    type: float64
    kind is float64: true
    value: 3.4

*ValueOf* returns a new *Value* initialized to the concrete value stored in the interface i. *ValueOf(nil)* returns the zero Value.

*Value* is the reflection interface to a Go value.

* Type and Kind

*Type* is the representation of a Go type. (and is an interface):

    var x uint8 = 'x'
    v := reflect.ValueOf(x)
    fmt.Println("type:", v.Type())          // uint8.
    fmt.Println("kind is uint8: ",
                v.Kind() == reflect.Uint8)  // true.
    x = uint8(v.Uint())                     // v.Uint returns a uint64.

A *Kind* represents the specific kind of type that a *Type* represents.

    type MyInt int
    var x MyInt = 7
    v := reflect.ValueOf(x)
    fmt.Println("kind is Int: ", v.Kind() == reflect.Int) // true.

* Type

    type Type interface {
        Align() int
        FieldAlign() int
        Method(int) Method
        MethodByName(string) (Method, bool)
        NumMethod() int
        Name() string
        PkgPath() string
        Size() uintptr
        String() string
        Kind() Kind
        Implements(u Type) bool  // Check if it implements Type u
        AssignableTo(u Type) bool
        ConvertibleTo(u Type) bool
        Bits() int
        ChanDir() ChanDir // for  Chan
        IsVariadic() bool // for ...argument
        Elem() Type // for Array, Chan, Map, Ptr, or Slice
        Field(i int) StructField // for Struct
        FieldByIndex(index []int) StructField
        FieldByName(name string) (StructField, bool)
        FieldByNameFunc(match func(string) bool) (StructField, bool)
        // ...

* Types

    type ChanDir // A channel type's direction
        func (d ChanDir) String() string

    type Kind //  The specific kind of type
        func (k Kind) String() string

    type Method // A single method
    type SelectCase // A single select case
    type SelectDir // The communication direction
    type SliceHeader // A slice
    type StringHeader // A string
    type StructField // A single field in a struct
    type StructTag // The tag in a struct field
        func (tag StructTag) Get(key string) string

    type Type // A Go type
    type Value // A Go value
    type ValueError // Error for Value
        func (e *ValueError) Error() string



* Kind

    // A Kind represents the specific kind of type that a Type represents.
    type Kind uint

    const (
    	Invalid Kind = iota
    	Bool
    	Int
    	Int8
    	Int16
    	Int32
    	Int64
    	Uint
    	Uint8
    	Uint16
    	Uint32
    	Uint64
    	Uintptr
        Float32
        Float64
        Complex64
        Complex128
    	// ...
    )

* Reflection goes from reflection object to interface value

    // Interface returns v's value as an interface{}.
    // func (v Value) Interface() interface{}

    y := v.Interface().(float64)  // y will have type float64

    fmt.Println(y)
    fmt.Printf("value is %7.1e\n", v.Interface()) // 3.4e+00

In short, the *Interface* method is the inverse of the *ValueOf* function, except that its result is always of static type interface{}.
Reiterating: Reflection goes from interface values to reflection objects and back again.

* To modify a reflection object, the  value must be settable

    var x float64 = 3.4
    v := reflect.ValueOf(x)
    v.SetFloat(7.1) // Error: will panic.

    // panic: reflect.Value.SetFloat using unaddressable value
    var x float64 = 3.4

    v := reflect.ValueOf(x)
    fmt.Println("settability of v:", v.CanSet()) // -> false

Damn, what is "settability"?

* Settability

Settability is determined by whether the  reflection object holds the original item.

    var x float64 = 3.4
    // We're passing the copy of x here.

    v := reflect.ValueOf(x)

    // Think about the difference between f(x) and f(&x).
    // v.SetFloat(7.1) updates the copied value inside the
    // reflection value.

So then, how can we modify the reflection value?

* Settability

Use pointers:

    var x float64 = 3.4
    p := reflect.ValueOf(&x)                     // Note: take the address of x.

    fmt.Println("type of p:", p.Type())          // -> type of p: *float64

    fmt.Println("settability of p:", p.CanSet()) // -> false

    v := p.Elem()
    fmt.Println("settability of v:", v.CanSet())

    v.SetFloat(7.1)                              // settability of v: true

    fmt.Println(x) // -> 7.1

* Modifying Structs

    type T struct {
        A int     // Only exported fields are settable.
        B string
    }

    t := T{42, "abc"}
    s := reflect.ValueOf(&t).Elem()

    typeOfT := s.Type()
    for i := 0; i < s.NumField(); i++ {
        f := s.Field(i)
        fmt.Printf("%d: %s %s = %v\n", i,
            typeOfT.Field(i).Name, f.Type(), f.Interface())
    }

    // "0: A int = 42" and "1: B string = abc"
    s.Field(0).SetInt(77)
    s.Field(1).SetString("Sunset Strip")
    fmt.Println("t is now", t) // t is now {77 Sunset Strip}

* reflect package

Constants and utility functions:

    const (
            SelectSend    // case Chan <- Send
            SelectRecv    // case <-Chan:
            SelectDefault // default
    )

    func Copy(dst, src Value) int

    // Recursive comparison; []T{} != nil
    func DeepEqual(a1, a2 interface{}) bool

    func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)

* References:

The Go Blog: The Laws of Reflection
.link http://blog.golang.org/laws-of-reflection http://blog.golang.org/laws-of-reflection

Go Data Structures - Interfaces
.link http://research.swtch.com/interfaces http://research.swtch.com/interfaces

Package reflect
.link http://golang.org/pkg/reflect http://golang.org/pkg/reflect