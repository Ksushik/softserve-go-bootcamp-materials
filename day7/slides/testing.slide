Testing
Week 2, day 2

Serhii Herasymov
SoftServe
sgeras@softserveinc.com



* Testing methodology

- Methods to test specific cases
- Techniques to write better tests
- A lot more to testing than "assert(func() == expected)"


* What Makes a Good Unit Test?

- Easy to write
- Readable
- Reliable
- Fast
- Truly unit, not integration

*4*"shoulds"*:

- It should be not tightly coupled to the concrete data source
- It should not violate the Single Responsibility Principle (SRP)
- It should not lie about the information required to get its job done
- It should be easy to predict and maintain

* Global state

- Avoid it as much as possible
- Instead of global state, try to make whatever is global a configuration option using global state as _default_, allowing tests to modify it.
- If necessary, make global state a `var` - so it can be modified.


* Testing Go code

Go has a built-in testing framework.

It is provided by the `testing` package and the `go` `test` command.

Here is a complete test file that tests the `strings.Index` function:

    package strings_test

    import (
        "strings"
        "testing"
    )

    func TestIndex(t *testing.T) {
        const s, sep, want = "chicken", "ken", 4
        got := strings.Index(s, sep)
        if got != want {
            t.Errorf("Index(%q,%q) = %v; want %v", s, sep, got, want)
        }
    }

* Table-driven tests

Go's struct literal syntax makes it easy to write table-driven tests:

    func TestIndex(t *testing.T) {
        var tests = []struct {
            s   string
            sep string
            out int
        }{
            {"", "", 0},
            {"", "a", -1},
            {"fo", "foo", -1},
            {"foo", "foo", 0},
            {"oofofoofooo", "f", 2},
            // etc
        }
        for _, test := range tests {
            actual := strings.Index(test.s, test.sep)
            if actual != test.out {
                t.Errorf("Index(%q,%q) = %v; want %v", test.s, test.sep, actual, test.out)
            }
        }
    }

* T

The `*testing.T` argument is used for error reporting:

    t.Errorf("got bar = %v, want %v", got, want)
    t.Fatalf("Frobnicate(%v) returned error: %v", arg, err)
    t.Logf("iteration %v", i)

And enabling parallel tests:

    t.Parallel()

And controlling whether a test runs at all:

    if runtime.GOARCH == "arm" {
        t.Skip("this doesn't work on ARM")
    }

* Running tests

The `go` `test` command runs tests for the specified package.
(It defaults to the package in the current directory.)

    $ go test
    PASS

    $ go test -v
    === RUN TestIndex
    --- PASS: TestIndex (0.00 seconds)
    PASS

To run the tests for all my projects:

    $ go test github.com/nf/...

Or for the standard library:

    $ go test std

* Test coverage

The go tool can report test coverage statistics.

    $ go test -cover
    PASS
    coverage: 96.4% of statements
    ok      strings    0.692s

The go tool can generate coverage profiles that may be intepreted by the cover tool.

    $ go test -coverprofile=cover.out
    $ go tool cover -func=cover.out
    strings/reader.go:    Len             66.7%
    strings/strings.go:   TrimSuffix     100.0%
    ... many lines omitted ...
    strings/strings.go:   Replace        100.0%
    strings/strings.go:   EqualFold      100.0%
    total:                (statements)    96.4%

* Coverage visualization

    $ go tool cover -html=cover.out

.image ./cover.png




* Testing HTTP clients and servers

The `net/http/httptest` package provides helpers for testing code that makes or serves HTTP requests.


* httptest.Server

An `httptest.Server` listens on a system-chosen port on the local loopback interface, for use in end-to-end HTTP tests.

    type Server struct {
        URL      string // base URL of form http://ipaddr:port with no trailing slash
        Listener net.Listener

        // TLS is the optional TLS configuration, populated with a new config
        // after TLS is started. If set on an unstarted server before StartTLS
        // is called, existing fields are copied into the new config.
        TLS *tls.Config

        // Config may be changed after calling NewUnstartedServer and
        // before Start or StartTLS.
        Config *http.Server
    }

    func NewServer(handler http.Handler) *Server

    func (*Server) Close() error

* httptest.Server in action

This code sets up a temporary HTTP server that serves a simple "Hello" response.

    ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, "Hello, client")
    }))
    defer ts.Close()

    res, err := http.Get(ts.URL)
    if err != nil {
        log.Fatal(err)
    }

    greeting, err := ioutil.ReadAll(res.Body)
    res.Body.Close()
    if err != nil {
        log.Fatal(err)
    }

    fmt.Printf("%s", greeting)

* httptest.ResponseRecorder

*httptest.ResponseRecorder* is an implementation of *http.ResponseWriter* that records its mutations for later inspection in tests.

    type ResponseRecorder struct {
        Code      int           // the HTTP response code from WriteHeader
        HeaderMap http.Header   // the HTTP response headers
        Body      *bytes.Buffer // if non-nil, the bytes.Buffer to append written data to
        Flushed   bool
    }

* httptest.ResponseRecorder in action

By passing a ResponseRecorder into an HTTP handler we can inspect the generated response.

    handler := func(w http.ResponseWriter, r *http.Request) {
        http.Error(w, "something failed", http.StatusInternalServerError)
    }

    req, err := http.NewRequest("GET", "http://example.com/foo", nil)
    if err != nil {
        log.Fatal(err)
    }

    w := httptest.NewRecorder()
    handler(w, req)

    fmt.Printf("%d - %s", w.Code, w.Body.String())


* Race Detection

A data race occurs when two goroutines access the same variable concurrently and at least one of the accesses is a write.

To help diagnose such bugs, Go includes a built-in data race detector.

Pass the -race flag to the go tool to enable the race detector:

    $ go test -race mypkg    // to test the package
    $ go run -race mysrc.go  // to run the source file
    $ go build -race mycmd   // to build the command
    $ go install -race mypkg // to install the package

* Finding errors with static analysis: vet

The *vet* tool checks code for common programmer mistakes:

- bad printf formats,
- bad build tags,
- bad range loop variable use in closures,
- useless assignments,
- unreachable code,
- bad use of mutexes,
- and more.

Usage:

    go vet [package]

* Testing from the inside

Most tests are compiled as part of the package under test.

This means they can access unexported details, as we have already seen.

* Testing from the outside

Occasionally you want to run your tests from outside the package under test.

(Test files as `package` `foo_test` instead of `package` `foo`.)

This can break dependency cycles. For example:

- The `testing` package uses `fmt`.
- The `fmt` tests must import `testing`.
- So the `fmt` tests are in package `fmt_test` and can import both `testing` and `fmt`.


* Mocks and fakes

Go eschews mocks and fakes in favor of writing code that takes broad interfaces.

For example, if you're writing a file format parser, don't write a function like this:

    func Parse(f *os.File) error

instead, write functions that take the interface you need:

    func Parse(r io.Reader) error

(An `*os.File` implements `io.Reader`, as does `bytes.Buffer` or `strings.Reader`.)


* Subprocess tests

Sometimes you need to test the behavior of a process, not just a function.

    func Crasher() {
        fmt.Println("Going down in flames!")
        os.Exit(1)
    }

To test this code, we invoke the test binary itself as a subprocess:

    func TestCrasher(t *testing.T) {
        if os.Getenv("BE_CRASHER") == "1" {
            Crasher()
            return
        }
        cmd := exec.Command(os.Args[0], "-test.run=TestCrasher")
        cmd.Env = append(os.Environ(), "BE_CRASHER=1")
        err := cmd.Run()
        if e, ok := err.(*exec.ExitError); ok && !e.Success() {
            return
        }
        t.Fatalf("process ran with err %v, want exit status 1", err)
    }

* Timing-dependent tests

    func TestFastThing(t *testing.T) {

        // ...

        select {
        case <- thingHappened;
        case <- time.After(timeout):
            t.Fatal("timeout")
        }
    }

Rules:

- don't use "fake time"
- use multiplier to increase timeouts



* New in 1.7 - Subtests

The Run methods of T allow defining subtests, without having to define separate functions for each. This enables creating hierarchical tests. It also provides a way to share common setup and tear-down code:

    func TestFoo(t *testing.T) {
        // ...setup code...
        t.Run("A=1", func(t *testing.T) { ... })
        t.Run("A=2", func(t *testing.T) { ... })
        t.Run("B=1", func(t *testing.T) { ... })
        // ...tear-down code...
    }

Running specific sub-tests:

    go test -run ''      # Run all tests.
    go test -run Foo     # Run top-level tests matching "Foo", such as "TestFooBar".
    go test -run Foo/A=  # For top-level tests matching "Foo", run subtests matching "A=".
    go test -run /A=1    # For all top-level tests, run subtests matching "A=1".





* âœ¨

.image ./ginkgo.png

* Ginkgo

*Ginkgo* is a BDD-style Golang testing framework built to help you efficiently write expressive and comprehensive tests. It is best paired with the *Gomega* matcher library but is designed to be matcher-agnostic.

    var _ = Describe("Book", func() {
        var longBook, shortBook  Book

        BeforeEach(func() {
            longBook  = Book{Title: "Les Miserables", Author: "Victor Hugo", Pages:  1489 }
            shortBook = Book{Title: "Fox In Socks",   Author: "Dr. Seuss",   Pages:  24 }
        })

        Describe("Categorizing book length", func() {
            Context("With more than 300 pages", func() {
                It("should be a novel", func() {
                    Expect(longBook.CategoryByLength()).To(Equal("NOVEL"))
                })
            })

            // much more Contexts...
        })
    })

* Ginkgo

https://onsi.github.io/ginkgo/
https://github.com/onsi/gomega


* Benchmarking

The Go _testing_ package contains a benchmarking facility that can be used to examine the performance of your Go code.

Let's write bench for Fib function:

    func Fib(n int) int {
            if n < 2 {
                    return n
            }
            return Fib(n-1) + Fib(n-2)
    }

* Benchmarking

Benchmarks are placed inside _test.go files and follow the rules of their Test counterparts.
In this first example weâ€™re going to benchmark the speed of computing the 10th number in the Fibonacci series.

    // from fib_test.go
    func BenchmarkFib10(b *testing.B) {
            // run the Fib function b.N times
            for n := 0; n < b.N; n++ {
                    Fib(10)
            }
    }

* Benchmarking

Rules:

- Benchmark functions start with Benchmark not Test.
- Benchmark functions are run several times by the testing package. The value of *b.N* will increase each time until the benchmark runner is satisfied with the stability of the benchmark. This has some important ramifications which weâ€™ll investigate later in this article.
- Each benchmark must execute the code under test *b.N* times. The for loop in _BenchmarkFib10_ will be present in every benchmark function.

* Benchmarking

Running:

We can invoke it with `go` `test` `-bench=.`

    $ go test -bench=.
    PASS
    BenchmarkFib10   5000000               509 ns/op
    ok      github.com/softserve/fib       3.084s

If you want to skip the tests, you can do so by passing a regex to the -run flag that will not match anything:

    go test -run=XXX -bench=.